Запит до REST API користувача:
1  GET /api/v1/users/456/profile
2  Authorization: Bearer eyJhbGciOi…
3
4  {
5    "id": "456",
6    "username": "@elonmusk",
7    "displayName": "Elon Musk",
8    "avatar": "https://cdn.x.com/avatar456.png",
9    "followersCount": 229000000
10  }

Подія Kafka: створення ретвіту.
1  {
2    "event": "RetweetCreated",
3    "timestamp": "2025-05-14T10:15:00Z",
4    "payload": {
5      "retweetId": "tw9876",
6      "originalTweetId": "tw1234",
7      "userId": "u890",
8      "retweetedAt": "2025-05-14T10:15:00Z"
9    }
10  }

Кешування твіта через Redis.
1  import redis
2  import json
3
4  r = redis.Redis(host='localhost', port=6379, db=0)
5
6  tweet = {"id": "tw123", "author": "u456", "text": "Just landed on Mars!"}
7  r.set("tweet:tw123", json.dumps(tweet), ex=60)
8
9  cached = r.get("tweet:tw123")
10  if cached:
11    print(json.loads(cached))

Шардінг твітів за ID.
1  Tweet IDs:
2    0000000 - 4999999  → Shard A (Tweet Store 1)
3    5000000 - 9999999  → Shard B (Tweet Store 2)
4    10000000+          → Shard C (Tweet Store 3)

WebSocket стрічка в реальному часі.
1  const socket = new WebSocket('wss://stream.x.com/feed');
2
3  socket.onmessage = function (event) {
4    const tweet = JSON.parse(event.data);
5    console.log(`[${tweet.author}]: ${tweet.text}`);
6  };

Canary Deployment (YAML).
1  strategy:
2    type: Canary
3    canary:
4      maxSurge: 10%
5      maxUnavailable: 0
6      steps:
7        - setWeight: 10
8        - pause: 5m
9        - setWeight: 50
10       - pause: 10m
11       - setWeight: 100
