                       Міністерство освіти і науки України

           Харківський національний університет радіоелектроніки




                         Кафедра програмної інженерії




                                      Звіт
                           до лабораторної роботи №2
                    з «Архітектура програмного забезпечення»




Виконав:                                                          Перевірив:
ст. гр. ПЗПІ-22-9                                              ас. кафедри ПІ
Новомлинський В.І.                                             Дашенков Д.С.




                                    Харків 2025
                                  1 ІСТОРІЯ ЗМІН


      Таблиця 1 - Історія змін

№                    Дата                   Версія звіту    Опис змін та
                                                            виправлень

1                    01.06.2025             0.1             Створено звіт




                                   2 ЗАВДАННЯ


      Тема: Мобільний застосунок

      На цій лабораторній роботі потрібно розробити мобільний програмний
застосунок для будь-якої поширеної на сьогодні мобільної платформи. Мобільний
застосунок повинен бути частиною системи і повинен взаємодіяти з нею. Для
реалізації програмного застосунку можна використовувати технології для
реалізації програмного забезпечення для мобільних платформ, вказані лектором, а
саме Kotlin для Android та Swift для iOS.
                          3 ОПИС ВИКОНАНОЇ РОБОТИ


​    3.1 Опис прийнятих інженерних рішень

     Під час розробки мобільного застосунку ArtGuardMobile було прийнято
низку технічних та архітектурних рішень, що забезпечили стабільну роботу,
модульність та зручність масштабування системи.

     1) Вибір мови Kotlin та Jetpack Compose​
​    Для реалізації застосунку було використано мову Kotlin, яка є офіційною для
Android-розробки. Побудова інтерфейсу здійснюється за допомогою Jetpack
Compose, що дозволяє декларативно описувати UI, підвищуючи швидкість
розробки та зменшуючи кількість помилок.

     2) Архітектура MVVM​
​    Усі компоненти розроблені з урахуванням патерну MVVM: ViewModel
відповідає за бізнес-логіку та взаємодію з мережею, а View лише відображає стан.
Це дозволяє зберігати логіку в одному місці та робить проєкт зручним для
підтримки і тестування.

     3) Зв’язок із backend через Retrofit​
​    Для взаємодії з сервером використано Retrofit – популярну HTTP-бібліотеку.
Кожна категорія даних (сенсори, об’єкти мистецтва, користувачі, сповіщення) має
окремий сервіс (SensorService, UserService тощо), що спрощує масштабування.

     4) Інтеграція з IoT через ngrok​
​    Проєкт взаємодіє з IoT-пристроями в реальному часі через тунель, створений
за допомогою ngrok. Це дозволяє мобільному застосунку отримувати дані сенсорів
із локальної мережі навіть у разі відсутності публічного хостингу. Таке рішення є
тимчасовим, але ефективним під час етапу розробки та тестування.
       5) Структурована архітектура​
​      Проєкт розділено на логічні шари:-

    -​ data.model — сутності (Alert, User, Sensor тощо) і відповідні ViewModel-и;
    -​ data.network — сервіси взаємодії з API;
    -​ data.storage — керування збереженням токенів і даних користувача;
    -​ ui. — екрани, згруповані за категоріями: login, alerts, sensors, dashboard.

       6) Авторизація та безпека​
​      Використовується JWT-токен для аутентифікації. Токен зберігається у
TokenStorage і автоматично додається до кожного HTTP-запиту. Перевірка
наявності токена виконується при старті застосунку, щоб визначити, чи потрібна
повторна авторизація.

       7) Валідація форм і користувацький досвід​
​      Усі форми (реєстрація, логін, створення сенсора) мають клієнтську
валідацію. У разі помилок користувач отримує зрозуміле повідомлення без
перезавантаження UI.

       8) Масштабованість​
​      Завдяки чіткому розділенню логіки та компонентів, додавання нових
сутностей або екранів (наприклад, камери спостереження чи карти розташування)
можливе без втручання в існуючі частини застосунку.

       9) Локальне збереження та сесії​
​      Короткострокові сесійні дані зберігаються в SharedPreferences через
UserStorage і TokenStorage, що дозволяє відновити сесію користувача після
перезапуску застосунку.
       3.2 Опис взаємодії компонентів мобільного застосунку одне з одним та з
іншими елементами системи.

Застосунок ArtGuardMobile реалізований із чіткою модульною структурою, що
забезпечує розділення логіки за принципами чистої архітектури. Взаємодія між
компонентами відбувається за допомогою Kotlin-класів, ViewModel-ів,
Composable-функцій, сховищ даних та API-сервісів.

       1) Основна точка входу: MainActivity.kt​
​      При запуску застосунку MainActivity ініціалізує TokenStorage та UserStorage,
перевіряє наявність токена і залежно від цього обирає стартовий маршрут (login
або dashboard). Далі передає керування до AppNavigation.

       2) Маршрутизація: AppNavigation.kt​
Компонент AppNavigation відповідає за навігацію між основними екранами:

    -​ LoginScreen
    -​ RegisterScreen
    -​ DashboardScreen
    -​ SensorListScreen
    -​ AlertListScreen

       Усередині маршруту dashboard ініціалізується DashboardViewModel, який
завантажує дані про об’єкти мистецтва, використовуючи API через Retrofit.
Навігація виконується через NavController.

       3) Екран авторизації: LoginScreen.kt​
​      Цей екран взаємодіє з AuthService для надсилання POST-запиту /api/login. У
разі успішного входу зберігається JWT-токен у TokenStorage, а дані користувача – у
UserStorage. Далі користувача перенаправляє на екран Dashboard.

      4) Екран реєстрації: RegisterScreen.kt​
​     Аналогічно до LoginScreen, взаємодіє з AuthService через Retrofit. Після
успішної реєстрації також відбувається збереження токена та перенаправлення.

      5) Екран головної панелі: DashboardScreen.kt​
​     Використовує DashboardViewModel, який через ArtObjectService отримує
список об’єктів мистецтва. У бічному меню передбачено навігацію до розділів:

    -​ Сенсори (SensorListScreen)
    -​ Сповіщення (AlertListScreen)
    -​ Вийти (очищує сховища та перенаправляє на Login)

      6) Екран сенсорів: SensorListScreen.kt​
Використовує SensorViewModel, який:

    -​ отримує токен із TokenStorage;
    -​ надсилає GET-запит через SensorService;
    -​ оновлює StateFlow, який автоматично рендериться у списку сенсорів.

      7) Екран сповіщень: AlertListScreen.kt​
​     Отримує список сповіщень з AlertService через AlertViewModel. Кожне
сповіщення можна позначити як переглянуте – відповідний запит надсилається на
бекенд. Непереглянуті сповіщення виділяються іншим кольором.

      8) Локальне сховище: TokenStorage та UserStorage​
​     Для зберігання авторизаційного токена і користувацьких даних
використовується SharedPreferences:

    -​ TokenStorage – для JWT-токена;
    -​ UserStorage – серіалізовані дані про користувача у JSON-форматі.

      9) Зв’язок із сервером: RetrofitInstance​
​     Усі запити до backend-системи (IoT/сервера через ngrok) реалізовані через
окремі сервіси (AuthService, SensorService, ArtObjectService, AlertService,
UserService), які створюються в RetrofitInstance на основі базової URL-адреси
(наприклад, https://<ngrok-url>/api/...).

      10) Валідація та UX​
​     На кожному екрані введення даних (логін, реєстрація, форма введення
нового об’єкта) реалізована клієнтська перевірка та відповідне повідомлення про
помилку.

      Ця структура дозволяє розділити відповідальність між шарами UI, логіки,
зберігання даних і мережевої взаємодії, що забезпечує зрозумілу архітектуру,
тестованість та зручність розширення.




      Посилання на github:

      https://github.com/NureNovomlynskyiViktor/apz-pzpi-22-9-novomlynskyi-viktor/
tree/main/Lab2/pzpi-22-9-novomlynskyi-viktor-lab2
3.3 UML діаграма прецедентів (Use Case Diagram)




               Рисунок 3.1 – UML діаграма прецедентів
3.4 UML діаграма компонентів (Component Diagram)




            Рисунок 3.2 – UML діаграма компонентів
3.5 UML діаграма пакетів (Package Diagram)




                   Рисунок 3.3 – UML діаграма пакетів
3.6 UML діаграма діяльності (Activity Diagram)
Сценарій: Працівник використовує мобільний застосунок




                  Рисунок 3.4 – UML діаграма діяльності
                                 4 ВИСНОВКИ

     У ході виконання лабораторної роботи було розроблено повноцінний
мобільний застосунок ArtGuardMobile мовою Kotlin для платформи Android.
Застосунок реалізує основний функціонал системи моніторингу об’єктів
мистецтва, включаючи авторизацію та реєстрацію користувачів, перегляд
інформаційної панелі, роботу із сенсорами, а також перегляд та обробку системних
сповіщень.

     Під час розробки було впроваджено архітектурний поділ коду на логічні
пакети з чітким розмежуванням відповідальностей, забезпечено обробку
HTTP-запитів за допомогою бібліотеки Retrofit, реалізовано зберігання токена та
інформації про користувача через SharedPreferences, а навігацію між екранами
виконано з використанням Jetpack Navigation та Jetpack Compose.

     Рольова модель (адміністратор, співробітник, спостерігач) впливає на
доступність функціоналу, що дозволяє ефективно розмежовувати повноваження
користувачів. Застосунок працює асинхронно та взаємодіє із серверною частиною,
підключеною через ngrok, що дає змогу взаємодіяти з локальним backend та
IoT-пристроями.

     Уся система побудована з урахуванням масштабованості та готовності до
подальшого розвитку, а створені UML-діаграми відображають структуру та логіку
застосунку, що сприяє його супроводу та аналізу.
