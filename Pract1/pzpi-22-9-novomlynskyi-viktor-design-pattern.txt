Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
до практичної роботи №1
з « Архітектури програмного забезпечення»

Виконав:

Перевірив:

ст. гр. ПЗПІ-22-9

ст. викладач кафедри ПІ

Новомлинський В.І.

Сокорчук І.П.

Харків 2025

1 ІСТОРІЯ ЗМІН
Таблиця 1 - Історія змін
№

Дата

Версія звіту

Опис змін та
виправлень

1

24.04.2025

0.1

Створено
титульну сторінку
звіту, розділи 1, 2,
3, 4

2

2.05.2025

0.2

Створено додатки
A, Б, В

2 ЗАВДАННЯ
У процесі виконання практичного завдання необхідно підготувати
доповідь на тему "Шаблон (патерн) проєктування програмного забезпечення" за
матеріалами книги Ґамма "Об’єктно-орієнтоване програмування. Патерни
проєктування". Необхідно створити та оформити слайди презентації доповіді, а
також записати відео з виступом і опублікувати його на платформі YouTube.
Потрібно оформити звіт про виконану роботу та завантажити на dl.nure.ua.
Після чого сформувати звіт у форматі текстового файлу, а також файл з
прикладами програмного коду та завантажити його в відповідну директорію
GitHub-репозиторію.
3 ОПИС ВИКОНАНОЇ РОБОТИ
У процесі виконання практичного завдання було підготовлено доповідь на
тему "Шаблон проєктування Iterator". Для створення доповіді було опрацьовано

матеріали з книги Ґамма "Патерни проєктування", а також інші
Інтернет-ресурси. Окрему увагу приділено теоретичному розумінню
поведінкового патерна Iterator, його структурі, принципам роботи та прикладам
його застосування в програмних рішеннях.
Для доповіді було створено слайди презентації (див. дод Б), які візуально
демонструють основні поняття патерна "Iterator" та фрагменти коду (див. дод.
В), які демонструють його застосування. Доповідь має такі розділи:
1. Патерни проєктування, їх роль та види;
2. Патерн проєктування "Iterator";
3. Доцільність використання;
4. Структура патерна;
5. Приклад застосування;
6. Переваги;
7. Недоліки;
8. Сфери використання;
9. Висновки.
10. Список використаних джерел.
На основі презентації записано відеодоповідь, у якій викладено суть
патерна, його переваги та недоліки (див. дод А).
4 ВИСНОВКИ
У процесі виконання роботи набуті практичні навички застосування
поведінкового патерна Ітератор. Поглиблено розуміння принципів організації
послідовного доступу до елементів колекції без розкриття її внутрішньої
структури, що сприяє реалізації принципу гнучкого управління об'єктами без
їхньої безпосередньої модифікації.

ДОДАТОК А
Посилання на відеозапис та текст хронологічного опису доповіді.
Відеозапис доповіді на YouTube: https://youtu.be/-UHL5jK5bEY
Хронологічний опис доповіді:
00:00 Вступ.
00:17 Зміст доповіді.
00:48 Патерни проєктування.
01:17 Класифікація патернів проєктування.
02:39 Патерн "Iterator". Визначення патерна Iterator та його суті.
03:28 Доцільність використання.
04:41 Структура патерну "Iterator.
05:47 Приклад застосування на мові програмування Java.
07:07 Переваги патерну "Iterator".
08:20 Недоліки патерну "Iterator".
09:52 Сфери використання. Приклади з реального життя/
11:13 Висновки.
12:03 Список використаних джерел.
Посилання на файл з кодом в GitHub репозиторії:
https://github.com/NureNovomlynskyiViktor/apz-pzpi-22-9-novomlynskyi-viktor/tre
e/main/Pract1/pzpi-22-9-novomlynskyi-viktor-design-pattern

ДОДАТОК Б
​

Cлайди презентації доповіді.

Рисунок Б.1 –Титульний слайд презентації

Рисунок Б.2 – Слайд зі змістом презентації

Рисунок Б.3 – Слайд з визначенням патернів проєктування

Рисунок Б.4 – Слайд з описом патерна “Iterator”

Рисунок Б.5 – Слайд з описом доцільності використання

Рисунок Б.6 – Слайд з описом структури патерна “Iterator”

Рисунок Б.7 – Слайд з прикладом застосування

Рисунок Б.8 – Слайд з описом переваг петерна “Iterator”

Рисунок Б.9 – Слайд з описом недоліків патерна “Iterator”

Рисунок Б.10 – Слайд з описом сфер використання патерна “Iterator”

Рисунок Б.11 – Слайд з висновками

Рисунок Б.12 – Слайд з описом використаних джерел

ДОДАТОК В

​

Приклади програмного коду. Патерн “Ітератор” - приклад на Java.

1

import java.util.Iterator;

2

import java.util.List;

3

import java.util.ArrayList;

4
5

class Book {

6

String title;

7
8

public Book(String title) {

9

this.title = title;

10

}

11
12

public String getTitle() {

13
14

return title;
}

15 }
16
17 class BookCollection implements Iterable<Book> {
18

private List<Book> books = new ArrayList<>();

19
20

public void addBook(Book book) {

21
22

books.add(book);
}

23
24

@Override

25

public Iterator<Book> iterator() {

26

return books.iterator();

27

}

28 }
29
30 public class Main {
31

public static void main(String[] args) {

32
BookCollection library = new
BookCollection();
33
34

library.addBook(new Book("Design Patterns"));

35

library.addBook(new Book("Clean Code"));

36

library.addBook(new Book("Refactoring"));

37
38

for (Book book : library) {

39
System.out.println("Книга: " +
book.getTitle());
40
41
42 }

}
}

