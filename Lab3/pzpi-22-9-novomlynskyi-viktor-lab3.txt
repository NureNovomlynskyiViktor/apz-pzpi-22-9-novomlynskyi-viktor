Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
до лабораторної роботи №3
з «Архітектура програмного забезпечення»

Виконав:

Перевірив:

ст. гр. ПЗПІ-22-9

ас. кафедри ПІ

Новомлинський В.І.

Дашенков Д.С.

Харків 2025

1 ІСТОРІЯ ЗМІН
Таблиця 1 - Історія змін
№

Дата

Версія звіту

Опис змін та
виправлень

1

03.06.2025

0.1

Створено звіт

2 ЗАВДАННЯ
Тема:Web-застосунок
У межах цієї лабораторної роботи необхідно реалізувати front-end частину
програмної системи, яка забезпечує веб-доступ для користувачів і адміністраторів
через окремі інтерфейси відповідно до ролей. Обидві частини інтерфейсу повинні
підтримувати інтернаціоналізацію та локалізацію, зокрема українську й англійську
мови, регіональні формати дати й часу, правила сортування тексту та напрями
введення. Інтерфейс адміністрування має включати можливості керування
користувачами, управління даними, створення резервних копій, а також експорт і
імпорт налаштувань та даних системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ
​

3.1 Опис прийнятих інженерних рішень
У процесі реалізації клієнтської частини інформаційної системи для

моніторингу музейних експонатів було прийнято такі технічні та архітектурні
рішення:
Під час розробки front-end частини системи ArtGuard було використано
сучасний JavaScript-фреймворк React, що дозволило організувати код у вигляді
повторно використовуваних компонентів. Для організації переходів між
сторінками застосовано React Router, що забезпечує поділ застосунку на маршрути
та обмеження доступу до певних сторінок на основі ролі користувача (звичайний
користувач або адміністратор).
Система інтернаціоналізації реалізована за допомогою бібліотеки i18next,
що забезпечує підтримку української та англійської мов, адаптацію формату
дати/часу, правильне сортування тексту відповідно до мови та підтримку напряму
введення тексту.
Особливу увагу приділено функціональності резервного копіювання та
імпорту даних — реалізовано створення копії повного стану системи в
JSON-форматі з можливістю подальшого відновлення, а також імпорт окремих
таблиць із валідацією структури вмісту.
Для гнучкого керування станом використано локальний state через React
Hooks (useState, useEffect, useRef), а стилізація інтерфейсу здійснена за допомогою
CSS, з використанням Flexbox та Box Shadows для створення сучасного
адаптивного вигляду.

Карусель на головній сторінці створено за допомогою бібліотеки react-slick,
яка стилізована відповідно до загального дизайну сайту. Вона підтримує ручне
перемикання через стрілки без автогортання. Користувачам також доступна
локалізована навігація, перемикач мови, адаптована адміністративна панель із
таблицями редагування, а також розділення доступу до функціоналу.

3.2 Опис взаємодії компонентів web-застосунку одне з одним та з іншими
елементами системи
Компоненти інтерфейсу згруповані у директорію components/ та
відповідають за відображення окремих частин UI — таких як UserTable,
MuseumTable, Navbar, LanguageSwitcher, AdminSection. Всі компоненти
використовуються в рамках сторінок, що знаходяться у pages/ — HomePage,
AdminDashboard, LoginPage.
У App.jsx реалізовано основну структуру застосунку: маршрутизацію,
підключення інтернаціоналізації (i18n.js), авторизацію, а також рендер залежних
сторінок в залежності від наявності токена та ролі користувача. Доступ до панелі
адміністратора можливий лише при наявності ролі admin.
Всі HTTP-запити до серверу інкапсулюються в services/, а саме в
authService.js, який відповідає за автентифікацію та отримання даних про
поточного користувача, а також окремі сервіси для CRUD-операцій з
користувачами, музеями, зонами, об’єктами(вони ж експонати), сенсорами,
порогами, вимірюваннями та сповіщеннями.
Обмін даними із сервером здійснюється через REST API, з передачею
JWT-токена в заголовку запиту. Додаткові утиліти, такі як utils/backup.js, містять
логіку резервного копіювання та імпорту з валідацією структури JSON.

Валідація структури імпортованих даних реалізована перед парсингом, щоб
уникнути помилок при оновленні системного стану. У випадку помилок
користувач отримує повідомлення з поясненням.
Формат дати та часу обробляється через вбудований Intl.DateTimeFormat, з
використанням локалі, яка зберігається у localStorage. Виведення дати/часу
реалізовано в таблицях MeasurementTable та AlertTable, з автоматичним
форматуванням відповідно до вибраної мови(локалізації).

Посилання на github:
https://github.com/NureNovomlynskyiViktor/apz-pzpi-22-9-novomlynskyi-viktor/
tree/main/Lab3/pzpi-22-9-novomlynskyi-viktor-lab3

3.3 UML діаграма прецедентів (Use Case Diagram)

Рисунок 3.1 – UML діаграма прецедентів

3.4 UML діаграма компонентів (Component Diagram)

Рисунок 3.2 – UML діаграма компонентів

3.5 UML діаграма пакетів (Package Diagram)

Рисунок 3.3 – UML діаграма пакетів

3.6 UML діаграма діяльності (Activity Diagram)
Сценарій - “Додавання нового об’єкта до бази даних”

Рисунок 3.4 – UML діаграма діяльності

4 ВИСНОВКИ
У ході виконання лабораторної роботи було спроєктовано та реалізовано
фронтенд-частину веб-застосунку ArtGuard з урахуванням ролей користувачів
(адміністратор та переглядач), підтримки багатомовності (українська та англійська
мови) та чіткої модульної структури. Інтерфейс системи розділено на компоненти,
кожен з яких відповідає за окрему функціональність — роботу з об’єктами,
сенсорами, користувачами, зонами тощо.
Архітектура побудована на основі React з використанням бібліотек i18next
(для інтернаціоналізації), axios (для HTTP-запитів), а також механізмів
маршрутизації та обробки форм. Забезпечено взаємодію з API для реалізації
основних CRUD-операцій, імпорту та експорту даних.
Побудовані UML-діаграми (прецедентів, компонентів, активності, пакетів)
описують основні аспекти системи: рольову взаємодію, організацію коду,
послідовність дій користувача та залежності між модулями. Це дозволяє наочно
представити структуру застосунку, полегшує розуміння системи та її супровід у
майбутньому.

